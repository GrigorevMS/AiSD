PTDatList createTestList() {
	int elemsCount = 5;
	PTDatValue* listElems = new PTDatValue[elemsCount];
	PTItemValue pVal;
	for (int i = 0; i < elemsCount; i++)
	{
		pVal = new TItemValue(10 * i);
		listElems[i] = pVal;
	}
	PTDatList pList = new TDatList(listElems, elemsCount);
	return pList;
}

cout << "Тестирование списка..." << endl;
	{
		cout << "Тест 1. Пустой список" << endl;
		TDatList list;
		cout << "1.1. list.GetDatValue(FIRST) == nullptr. Expected: " << true << ", actual: "  << (list.GetDatValue(FIRST) == nullptr) << endl;
		cout << "1.2. list.GetDatValue(LAST) == nullptr. Expected: " << true << ", actual: " << (list.GetDatValue(LAST) == nullptr) << endl;
		cout << "1.3. list.GetDatValue(CURRENT) == nullptr. Expected: " << true << ", actual: " << (list.GetDatValue(CURRENT) == nullptr) << endl;
		cout << "1.4. list.GetListLength(). Expected: " << 0 << ", actual: " << list.GetListLength() << endl;
		cout << "1.5. list.IsEmpty(). Expected: " << true << ", actual: " << list.IsEmpty() << endl;
		cout << endl;
	}
	{
		cout << "Тест 2. Список {0, 10, 20, 30, 40}" << endl;

		PTDatList pList = createTestList();

		int firstVal = ((PTItemValue)pList->GetDatValue(FIRST))->GetValue();
		int lastVal = ((PTItemValue)pList->GetDatValue(LAST))->GetValue();
		int currentVal = ((PTItemValue)pList->GetDatValue(CURRENT))->GetValue();

		cout << "2.1. Первый элемент. Expected: " << 0 << ", actual: " << firstVal << endl;
		cout << "2.2. Последний элемент. Expected: " << 40 << ", actual: " << lastVal << endl;
		cout << "2.3. Текущий элемент. Expected: " << 0 << ", actual: " << currentVal << endl;
		cout << "2.4. pList->GetListLength(). Expected: " << 5 << ", actual: " << pList->GetListLength() << endl;
		cout << "2.5. pList->IsEmpty(). Expected: " << false << ", actual: " << pList->IsEmpty() << endl;
		cout << "2.6. pList->GetCurrentPos(). Expected: " << 0 << ", actual: " << pList->GetCurrentPos() << endl;
		cout << "2.7. pList->IsListEnded(). Expected: " << false << ", actual: " << pList->IsListEnded() << endl;
		
		cout << "2.8. Печать списка: " << *pList << endl;

		delete pList;
		cout << endl;
	}
	{
		cout << "Тест 3. SetCurrentPos()/GetCurrentPos()/Reset()" << endl;

		PTDatList pList = createTestList();

		pList->SetCurrentPos(2);
		int currentVal = ((PTItemValue)pList->GetDatValue(CURRENT))->GetValue();

		cout << "3.1. Текущая позиция. Expected: " << 2 << ", actual: " << pList->GetCurrentPos() << endl;
		cout << "3.2. Текущий элемент. Expected: " << 20 << ", actual: " << currentVal << endl;

		pList->Reset();
		currentVal = ((PTItemValue)pList->GetDatValue(CURRENT))->GetValue();

		cout << "После pList->Reset()" << endl;
		cout << "3.3. Текущая позиция. Expected: " << 0 << ", actual: " << pList->GetCurrentPos() << endl;
		cout << "3.4. Текущий элемент. Expected: " << 0 << ", actual: " << currentVal << endl;

		delete pList;
		cout << endl;
	}
	{
		cout << "Тест 4. GoNext()/IsListEnded()" << endl;

		PTDatList pList = createTestList();

		pList->GoNext();
		int currentVal = ((PTItemValue)pList->GetDatValue(CURRENT))->GetValue();

		cout << "После pList->GoNext() x1" << endl;
		cout << "4.1. Текущая позиция. Expected: " << 1 << ", actual: " << pList->GetCurrentPos() << endl;
		cout << "4.2. Текущий элемент. Expected: " << 10 << ", actual: " << currentVal << endl;
		cout << "4.3. Конец списка? Expected: " << false << ", actual: " << pList->IsListEnded() << endl;

		pList->GoNext();
		pList->GoNext();
		pList->GoNext();
		currentVal = ((PTItemValue)pList->GetDatValue(CURRENT))->GetValue();

		cout << "После pList->GoNext() x3" << endl;
		cout << "4.4. Текущая позиция. Expected: " << 4 << ", actual: " << pList->GetCurrentPos() << endl;
		cout << "4.5. Текущий элемент. Expected: " << 40 << ", actual: " << currentVal << endl;
		cout << "4.6. Конец списка? Expected: " << false << ", actual: " << pList->IsListEnded() << endl;

		pList->GoNext();

		cout << "После еще одного вызова pList->GoNext() список должен закончиться" << endl;
		cout << "4.7. Конец списка? Expected: " << true << ", actual: " << pList->IsListEnded() << endl;

		delete pList;
		cout << endl;
	}
	{
		cout << "Тест 5. Вставка/удаление звеньев {0, 10, 20, 30, 40}" << endl;

		PTDatList pList = createTestList();
		pList->SetCurrentPos(2);

		PTDatValue pVal = new TItemValue(11);
		pList->InsCurrent(pVal);
		int currentVal = ((PTItemValue)pList->GetDatValue(CURRENT))->GetValue();
		cout << "Вставка на текущую позицию (2) элемента (11)" << endl;
		cout << "5.1. Текущая позиция. Expected: " << 2 << ", actual: " << pList->GetCurrentPos() << endl;
		cout << "5.2. Текущий элемент. Expected: " << 11 << ", actual: " << currentVal << endl;

		pVal = new TItemValue(12);
		pList->InsFirst(pVal);
		int firstVal = ((PTItemValue)pList->GetDatValue(FIRST))->GetValue();
		cout << "Вставка в начало элемента (12)" << endl;
		cout << "5.3. Первый элемент. Expected: " << 12 << ", actual: " << firstVal << endl;

		pVal = new TItemValue(13);
		pList->InsLast(pVal);
		int lastVal = ((PTItemValue)pList->GetDatValue(LAST))->GetValue();
		cout << "Вставка в конец элемента (13)" << endl;
		cout << "5.4. Последний элемент. Expected: " << 13 << ", actual: " << lastVal << endl;

		cout << endl << "5.5. Промежуточная печать списка." << endl;
		cout << "Expected: 12 0 10 11 20 30 40 13 " << endl;
		cout << "Actual:   " << *pList << endl << endl;

		pList->SetCurrentPos(0);
		pList->DelCurrent();
		cout << "Устанавливаем текущую позицию 0, удаляем текущий элемент" << endl;
		cout << "5.6. Промежуточная печать списка." << endl;
		cout << "Expected: 0 10 11 20 30 40 13 " << endl;
		cout << "Actual:   " << *pList << endl << endl;

		pList->SetCurrentPos(pList->GetListLength() - 1);
		pList->DelCurrent();
		cout << "Устанавливаем текущую позицию pList->GetListLength() - 1, удаляем текущий элемент" << endl;
		cout << "5.7. Промежуточная печать списка." << endl;
		cout << "Expected: 0 10 11 20 30 40 " << endl;
		cout << "Actual:   " << *pList << endl << endl;

		pList->DelFirst();
		cout << "Удаляем первый элемент" << endl;
		cout << "5.8. Промежуточная печать списка." << endl;
		cout << "Expected: 10 11 20 30 40 " << endl;
		cout << "Actual:   " << *pList << endl << endl;

		pList->DelList();
		cout << "Удаляем весь список" << endl;
		cout << "5.9. Промежуточная печать списка (список должен быть пуст)." << endl;
		cout << "Expected: " << endl;
		cout << "Actual:   " << *pList << endl << endl;

		delete pList;
		cout << endl;
	}
	{
		cout << "Тест 6. Вставка/удаление звеньев (пустой список)" << endl;

		TDatList list;

		PTDatValue pVal1 = new TItemValue(14);
		PTDatValue pVal2 = new TItemValue(15);
		PTDatValue pVal3 = new TItemValue(16);
		list.InsFirst(pVal1);
		list.InsLast(pVal2);
		list.InsCurrent(pVal3);

		cout << "Вставляем InsFirst(14), InsLast(15), InsCurrent(16)" << endl;
		cout << "6.1. Промежуточная печать списка." << endl;
		cout << "Expected: 16 14 15 " << endl;
		cout << "Actual:   " << list << endl << endl;

		list.DelList();

		cout << "Удаляем весь список" << endl;
		cout << "6.2. Промежуточная печать списка (список должен быть пуст)." << endl;
		cout << "Expected: " << endl;
		cout << "Actual:   " << list << endl << endl;

		cout << endl;
	}